version: '3.8'

volumes:
  postgres-data:

services:
  backend:
    container_name: backend
    restart: always
    expose:
      - 4000
    ports:
      - 4000:4000
    build:
      context: ../../..
      dockerfile: src/infrastructure/docker/dev.Dockerfile
    environment:
      - PORT=4000
      - ENABLE_API_ERROR_MESSAGES=true
      - PUBLIC_RSA_KEY_PATH=/app/src/infrastructure/conf/keys/rsa_public.pem
      - PRIVATE_RSA_KEY_PATH=/app/src/infrastructure/conf/keys/rsa_private.pem
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=postgres
      - SYNCHRONIZE=true
      - REDIS_DSN=redis://redis:6379
    volumes:
      - ../../../:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    expose:
      - 5432
    ports:
      - 5432:5432
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: redis:latest
    expose:
      - 6379
    ports:
      - 6379:6379
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 5s
      timeout: 5s
      retries: 5